# Default values for loadtest-app Helm chart

# Global settings
global:
  environment: development
  imagePullPolicy: IfNotPresent

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Unified image configuration for backend and workers
# Both backend and workers use the same image with different SERVICE_TYPE env var
image:
  repository: loadtest/app
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Backend (FastAPI) configuration
backend:
  enabled: true
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 8000
    annotations: {}
  
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  # Environment variables specific to backend
  env:
    LOG_LEVEL: info
    APP_ENV: development
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /api/health
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Pod annotations
  podAnnotations: {}
  
  # Pod security context
  podSecurityContext: {}
  
  # Container security context
  securityContext: {}
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity
  affinity: {}

# Frontend (React) configuration
frontend:
  enabled: true
  replicaCount: 2
  
  image:
    repository: loadtest/frontend
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  
  # Environment variables
  env:
    # API URL will be constructed from ingress host
    VITE_API_URL: ""
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Celery Workers configuration
workers:
  enabled: true
  replicaCount: 2
  
  # Uses the same unified image as backend
  # Differentiated by SERVICE_TYPE environment variable
  
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  # Worker-specific environment variables
  env:
    WORKER_CONCURRENCY: "4"
    WORKER_PREFETCH_MULTIPLIER: "4"
    LOG_LEVEL: info
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Redis configuration (Message Broker & Cache)
redis:
  enabled: true
  
  image:
    repository: redis
    tag: "7.2-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 6379
  
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Persistence
  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
  
  # Redis configuration
  config:
    maxmemory: "256mb"
    maxmemory-policy: "allkeys-lru"
    save: "60 1"  # Save to disk every 60 seconds if at least 1 key changed
  
  # External Redis (if redis.enabled = false)
  externalUrl: ""
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# MongoDB configuration (Database)
mongodb:
  enabled: true
  
  image:
    repository: mongo
    tag: "7.0"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 27017
  
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi
  
  # Persistence
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
  
  # Authentication
  auth:
    enabled: true
    database: loadtest_db
    username: root
    # These should be set via --set flags or external secrets
    password: ""
    rootPassword: ""
  
  # Initialize database
  initdb:
    enabled: true
    scripts: {}
  
  # External MongoDB (if mongodb.enabled = false)
  externalUrl: ""
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    # cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: loadtest.local
      paths:
        - path: /api
          pathType: Prefix
          backend: backend
        - path: /
          pathType: Prefix
          backend: frontend
  tls: []
  # tls:
  #   - secretName: loadtest-tls
  #     hosts:
  #       - loadtest.example.com

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /api/metrics
    labels: {}

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1
